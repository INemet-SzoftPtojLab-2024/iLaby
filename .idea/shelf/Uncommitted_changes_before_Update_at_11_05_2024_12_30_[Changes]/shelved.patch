Index: src/main/java/org/networking/MapHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.org.networking;\r\n\r\nimport main.java.org.game.Isten;\r\nimport main.java.org.game.Map.*;\r\nimport main.java.org.linalg.Vec2;\r\n\r\nimport java.awt.event.KeyEvent;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\n\r\nimport static main.java.org.game.Map.Algorithms.Merge.mergeRooms;\r\nimport static main.java.org.game.Map.Algorithms.SetDoors.TakeOutDoor;\r\nimport static main.java.org.game.Map.Algorithms.SetDoors.addDoorToEdgeWithoutDoor;\r\nimport static main.java.org.game.Map.Algorithms.Split.splitRooms;\r\n\r\npublic class MapHandler extends ServerSideHandler {\r\n\r\n    int sec = 0;\r\n    boolean stop = true;\r\n    double delta = 0;\r\n\r\n\r\n    @Override\r\n    public void create(GameServer server) {\r\n        this.server = server;\r\n        this.isten = server.isten;\r\n        isten.getMap().init(isten);\r\n        isInitialized = true;\r\n        sendDataToWaitingClients();\r\n    }\r\n\r\n    @Override\r\n    public void sendDataToClient(PlayerMP client) {\r\n\r\n        if(!isInitialized) {\r\n            if(!waitingClients.contains(client)) waitingClients.add(client);\r\n            return;\r\n        }\r\n\r\n        Map map = isten.getMap();\r\n        for(int i = 0; i < map.getMapRowSize(); i++) {\r\n            for(int j = 0; j < map.getMapColumnSize(); j++) {\r\n                Vec2 pos = map.getUnitRooms()[i][j].getPosition();\r\n                int type = map.getUnitRooms()[i][j].getOwnerRoom().getRoomType().ordinal();\r\n                Packet04UnitRoom packet = new Packet04UnitRoom(pos.x, pos.y, type);\r\n                server.sendData(packet.getData(), client.ipAddress, client.port);\r\n            }\r\n        }\r\n\r\n\r\n        //\r\n        for(int i = 0; i < map.getEdgeManager().getRoomEdges().size(); i++) {\r\n            EdgeBetweenRooms re = map.getEdgeManager().getRoomEdges().get(i);\r\n            for (int j = 0; j < re.getWalls().size(); j++) {\r\n                EdgePiece edgePiece = re.getWalls().get(j);\r\n                Vec2 pos = edgePiece.getCollider().getPosition();\r\n                Vec2 scale = edgePiece.getCollider().getScale();\r\n                Packet20Wall packet = new Packet20Wall(pos.x, pos.y, scale.x, scale.y, edgePiece.isDoor());\r\n                server.sendData(packet.getData(), client.ipAddress, client.port);\r\n            }\r\n            /*\r\n            try {\r\n                Thread.sleep(5);\r\n            } catch (InterruptedException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n\r\n             */\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    @Override\r\n    public void sendDataToAllClients(Packet packet) {\r\n        packet.writeData(server);\r\n    }\r\n\r\n    @Override\r\n    public void update(Isten isten, double deltaTime) {\r\n        //for testing\r\n        if(isten.getInputHandler().isKeyReleased(KeyEvent.VK_SPACE)){\r\n            stop = !stop;\r\n            //if(stop) printMap();\r\n        }\r\n\r\n        if(!stop) {\r\n            delta += deltaTime;\r\n            //Original was: 1\r\n            //Megváltoztattam 0.1-re, hogy gyorsabban tötrénjenek a változások\r\n            if (delta > 2) {\r\n                //TESTCASE 1:::\r\n\r\n\r\n               if(false){\r\n                    Vec2 pos = addDoorToEdgeWithoutDoor(isten, isten.getMap());\r\n                    handleAddOrDeleteDoor(pos, true);\r\n                    //System.out.println(\"ajtoaddolas tortent\");\r\n                }\r\n                else{\r\n                    Vec2 pos = TakeOutDoor(isten,true,isten.getMap());\r\n                    if(pos.x != -1 && pos.y != -1) {\r\n                        handleAddOrDeleteDoor(pos, false);\r\n                        //stop = true;\r\n                        //System.out.println(\"edgeNum: \"+isten.getMap().getEdgeManager().getRoomEdges().size());\r\n                        //System.out.println(\"doorNum: \"+isten.getMap().getEdgeManager().getDoorNum());\r\n                        //System.out.println(\"ajtokivetel tortent\");\r\n                    }\r\n                }\r\n\r\n\r\n\r\n\r\n\r\n                //TESTCASE 2:\r\n               if (sec % 4 == 0) {\r\n                    Collections.shuffle(isten.getMap().getRooms());\r\n\r\n                    Room r1 = isten.getMap().getRooms().get(0);\r\n                    Room r2 = isten.getMap().getRooms().get(0).getPhysicallyAdjacentRooms().get(0);\r\n                    handleUnitRoomChange(r2.getUnitRooms(), r1.getRoomType().ordinal());\r\n                    handleWallDeletion(isten.getMap().getEdgeManager().getEdgeBetweenRooms(r1, r2));\r\n                    mergeRooms(r1, r2,isten.getMap());\r\n                    handleRoomEdges(r1);\r\n\r\n                }\r\n                //TESTCASE 3:\r\n\r\n\r\n                if((sec+2)%4==0) {\r\n                    for (Room splittable : isten.getMap().getRooms()) {\r\n                        int newID;\r\n                        if ((newID = splitRooms(splittable, isten.getMap())) != -1) {\r\n\r\n                            for(Room room: isten.getMap().getRooms()) {\r\n                                if(room.getID() == newID) {\r\n                                    handleUnitRoomChange(room.getUnitRooms(), room.getRoomType().ordinal());\r\n                                    handleWallAddition(isten.getMap().getEdgeManager().getEdgeBetweenRooms(splittable, room));\r\n                                    handleRoomEdges(room);\r\n                                    handleRoomEdges(splittable);\r\n                                    break;\r\n                                }\r\n                            }\r\n                            //System.out.println(\"sikerult a split\");\r\n                            //System.out.println(splittable.getID() + \" adjacentrooms: \" + splittable.getPhysicallyAdjacentRooms().size());\r\n                            //System.out.println(splittable.getID() + \" Dooradjacentrooms: \" + splittable.getDoorAdjacentRooms().size());\r\n                            //stop = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n\r\n\r\n                sec++;\r\n                delta = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private void handleAddOrDeleteDoor(Vec2 pos, boolean isDoor) {\r\n        Packet22EdgePieceChanged packet = new Packet22EdgePieceChanged(pos.x,\r\n                pos.y,\r\n                isDoor);\r\n        sendDataToAllClients(packet);\r\n        /*\r\n        try {\r\n            Thread.sleep(5);\r\n        } catch (InterruptedException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n\r\n         */\r\n    }\r\n\r\n    public void handleRoomEdges(Room room) {\r\n        for(EdgeBetweenRooms edgeBetweenRooms: isten.getMap().getEdgeManager().getAllEdgeForARoom(room)) {\r\n            for(EdgePiece edgePiece: edgeBetweenRooms.getWalls()) {\r\n                Packet22EdgePieceChanged packet = new Packet22EdgePieceChanged(edgePiece.getPosition().x,\r\n                        edgePiece.getPosition().y,\r\n                        edgePiece.isDoor());\r\n                sendDataToAllClients(packet);\r\n                /*\r\n                try {\r\n                    Thread.sleep(5);\r\n                } catch (InterruptedException e) {\r\n                    throw new RuntimeException(e);\r\n                }\r\n\r\n                 */\r\n            }\r\n        }\r\n    }\r\n\r\n    public void handleWallAddition(EdgeBetweenRooms edge) {\r\n        for(EdgePiece edgePiece: edge.getWalls()) {\r\n            Packet20Wall packet = new Packet20Wall(edgePiece.getPosition().x, edgePiece.getPosition().y,\r\n                    edgePiece.getCollider().getScale().x, edgePiece.getCollider().getScale().y,\r\n                    edgePiece.isDoor());\r\n            sendDataToAllClients(packet);\r\n            /*\r\n            try {\r\n                Thread.sleep(5);\r\n            } catch (InterruptedException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n\r\n             */\r\n        }\r\n    }\r\n    public void handleWallDeletion(EdgeBetweenRooms edge) {\r\n        for(EdgePiece edgePiece: edge.getWalls()) {\r\n            Packet23WallDelete packet = new Packet23WallDelete(edgePiece.getPosition().x,\r\n                    edgePiece.getPosition().y);\r\n            sendDataToAllClients(packet);\r\n            /*\r\n            try {\r\n                Thread.sleep(5);\r\n            } catch (InterruptedException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n\r\n             */\r\n        }\r\n    }\r\n\r\n    public void handleUnitRoomChange(List<UnitRoom> unitRooms, int type) {\r\n\r\n        for(UnitRoom unitRoom: unitRooms) {\r\n            Packet04UnitRoom packet = new Packet04UnitRoom(unitRoom.getPosition().x,\r\n                    unitRoom.getPosition().y, type);\r\n            sendDataToAllClients(packet);\r\n            /*\r\n            try {\r\n                Thread.sleep(5);\r\n            } catch (InterruptedException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n\r\n             */\r\n        }\r\n\r\n    }\r\n\r\n    public void CheckIfPlayerOpenedDoor(Packet25PlayerForDoorOpen packet) {\r\n\r\n\r\n        for(PlayerMP player: isten.getUpdatablesByType(PlayerMP.class)) {\r\n            if(player.getUsername().equalsIgnoreCase(packet.getUsername())) {\r\n                Vec2 doorPos = isten.getMap().getEdgeManager().OpenDoor(player);\r\n                if(doorPos.x == -1 && doorPos.y == -1) return;\r\n\r\n                Packet24DoorOpen packet24DoorOpen = new Packet24DoorOpen(doorPos.x, doorPos.y, false);\r\n                sendDataToAllClients(packet24DoorOpen);\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/networking/MapHandler.java b/src/main/java/org/networking/MapHandler.java
--- a/src/main/java/org/networking/MapHandler.java	(revision 7213115c5a796d99cc79b2535ef10bb5a1556e4b)
+++ b/src/main/java/org/networking/MapHandler.java	(date 1715423447652)
@@ -44,6 +44,7 @@
                 int type = map.getUnitRooms()[i][j].getOwnerRoom().getRoomType().ordinal();
                 Packet04UnitRoom packet = new Packet04UnitRoom(pos.x, pos.y, type);
                 server.sendData(packet.getData(), client.ipAddress, client.port);
+                server.sendData(packet.getData(), client.ipAddress, client.port);
             }
         }
 
Index: src/main/java/org/networking/GameServer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.org.networking;\r\n\r\nimport main.java.org.game.Isten;\r\nimport java.io.IOException;\r\nimport java.net.DatagramPacket;\r\nimport java.net.DatagramSocket;\r\nimport java.net.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport main.java.org.game.Map.Room;\r\nimport main.java.org.game.Map.RoomType;\r\nimport main.java.org.game.Map.UnitRoom;\r\nimport main.java.org.items.ChestManager;\r\nimport main.java.org.items.Item;\r\nimport main.java.org.items.ItemManager;\r\nimport main.java.org.linalg.Vec2;\r\nimport main.java.org.networking.Packet.PacketTypes;\r\n\r\npublic class GameServer extends Thread {\r\n    private ArrayList<ServerSideHandler> serverSideHandlers;\r\n    private VillainHandler villainHandler;\r\n    private MapHandler mapHandler;\r\n    private TimeHandler timeHandler;\r\n    private PlayerStatusHandler playerStatusHandler;\r\n    private ChestGenerationHandler chestGenerationHandler;\r\n    private DatagramSocket socket;\r\n\r\n    private ArrayList<byte[]> events = new ArrayList<>();\r\n\r\n    Isten isten;\r\n    boolean isInitialized = false;\r\n\r\n    //Notification for gamemanager, that the server is initialized, so it can enter the gameloop\r\n    SharedObject InitializationLock;\r\n\r\n    //Just values, not references for the actual players\r\n    //When changing something in one of the connectedPlayers it won't change anything on the actual players in updatable\r\n    private List<PlayerMP> connectedPlayers = new ArrayList<>();\r\n    public GameServer(Isten isten) {\r\n        this.isten = isten;\r\n        InitializationLock = new SharedObject();\r\n        try {\r\n            this.socket = new DatagramSocket(1331);\r\n        }\r\n        catch(SocketException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void run() {\r\n        System.out.println(\"ITS THE SERVER!\");\r\n        startServer();\r\n        while(true) {\r\n            //Get packets from clients\r\n            byte[] data = new byte[1024];\r\n            DatagramPacket packet = new DatagramPacket(data, data.length);\r\n            try {\r\n                socket.receive(packet);\r\n            } catch (IOException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n            parsePacket(packet.getData(), packet.getAddress(), packet.getPort());\r\n        }\r\n    }\r\n\r\n    private void startServer() {\r\n        serverSideHandlers = new ArrayList<ServerSideHandler>();\r\n        mapHandler = new MapHandler();\r\n        timeHandler = new TimeHandler();\r\n        villainHandler = new VillainHandler();\r\n        playerStatusHandler = new PlayerStatusHandler();\r\n        chestGenerationHandler = new ChestGenerationHandler();\r\n\r\n        serverSideHandlers.add(mapHandler);\r\n        serverSideHandlers.add(timeHandler);\r\n        serverSideHandlers.add(villainHandler);\r\n        serverSideHandlers.add(playerStatusHandler);\r\n        serverSideHandlers.add(chestGenerationHandler);\r\n\r\n        for(ServerSideHandler serverSideHandler: serverSideHandlers) {\r\n            serverSideHandler.create(this);\r\n            serverSideHandler.setInitialized(true);\r\n        }\r\n        isInitialized = true;\r\n        //Send notification to game manager, so that it can start the game loop\r\n        InitializationLock.sendNotification();\r\n\r\n    }\r\n\r\n    public void updateServer(Isten isten, double deltaTime) {\r\n        for(ServerSideHandler serverSideHandler: serverSideHandlers) {\r\n            if(serverSideHandler.isInitialized && isInitialized) serverSideHandler.update(isten, deltaTime);\r\n        }\r\n    }\r\n\r\n    //Parse packet to string\r\n    private void parsePacket(byte[] data, InetAddress address, int port) {\r\n        String message = new String(data).trim();\r\n        PacketTypes type = Packet.lookupPacket(message.substring(0,2));\r\n        Packet packet = null;\r\n        switch(type) {\r\n            default:\r\n                break;\r\n            case INVALID:\r\n                break;\r\n            case LOGIN:\r\n                packet = new Packet00Login(data);\r\n                handleLogin((Packet00Login)packet, address, port);\r\n                break;\r\n            case DISCONNECT:\r\n                break;\r\n            case MOVE:\r\n                packet = new Packet02Move(data);\r\n                handleMove(((Packet02Move)packet));\r\n                break;\r\n            case ANIMATION:\r\n                packet = new Packet03Animation(data);\r\n                handleAnimation((Packet03Animation) packet);\r\n                break;\r\n            case CHESTOPENED:\r\n                packet = new Packet11ChestOpened(data);\r\n                handleChestOpened((Packet11ChestOpened) packet);\r\n                break;\r\n            case ITEMPICKEDUP:\r\n                packet = new Packet12ItemPickedUp(data);\r\n                handleItemPickedUp((Packet12ItemPickedUp) packet);\r\n                break;\r\n            case ITEMDROPPED:\r\n                packet = new Packet13ItemDropped(data);\r\n                handleItemDropped((Packet13ItemDropped) packet);\r\n                break;\r\n            case GASMASK:\r\n                packet = new Packet14Gasmask(data);\r\n                handleGasmask((Packet14Gasmask) packet);\r\n                break;\r\n            case PLAYERPOSFORDOOROPEN:\r\n                packet = new Packet25PlayerForDoorOpen(data);\r\n                handlePlayerPosForDoorOpen((Packet25PlayerForDoorOpen)packet);\r\n                break;\r\n            case CAMEMBERT:\r\n                packet = new Packet17Camembert(data);\r\n                handleCamembert((Packet17Camembert)packet);\r\n                break;\r\n            case TVSZ:\r\n                packet = new Packet15Tvsz(data);\r\n                handleTvsz((Packet15Tvsz)packet);\r\n                break;\r\n            case ISPLAYERINVILLAINROOM:\r\n                packet = new Packet41IsPlayerInVillainRoom(data);\r\n                handleIsPlayerVillainRoom((Packet41IsPlayerInVillainRoom)packet);\r\n                break;\r\n            case ITEMSDROPPED:\r\n                packet = new Packet42ItemsDropped(data);\r\n                handleItemsDropped((Packet42ItemsDropped)packet);\r\n                break;\r\n        }\r\n    }\r\n\r\n    private void handleItemsDropped(Packet42ItemsDropped packet) {\r\n        sendDataToAllClients(packet.getData());\r\n    }\r\n\r\n    private void handleIsPlayerVillainRoom(Packet41IsPlayerInVillainRoom packet) {\r\n        sendDataToAllClients(packet.getData());\r\n    }\r\n\r\n    private void handleTvsz(Packet15Tvsz packet) {\r\n        sendDataToAllClients(packet.getData());\r\n    }\r\n\r\n    private void handleCamembert(Packet17Camembert packet) {\r\n        int x = (int)packet.getX();\r\n        int y = (int)packet.getY();\r\n        Room ownerRoom = isten.getMap().getUnitRooms()[y][x].getOwnerRoom();\r\n        ownerRoom.setRoomType(RoomType.GAS);\r\n\r\n        for(UnitRoom unitRoom: ownerRoom.getUnitRooms()) {\r\n            Packet04UnitRoom packet04UnitRoom = new Packet04UnitRoom(unitRoom.getPosition().x,\r\n                    unitRoom.getPosition().y, RoomType.GAS.ordinal());\r\n            sendDataToAllClients(packet04UnitRoom.getData());\r\n        }\r\n    }\r\n\r\n    private void handleGasmask(Packet14Gasmask packet) {\r\n        for(int i = 0; i < isten.getUpdatables().size(); i++) {\r\n            if(isten.getUpdatable(i).getClass() == ItemManager.class) {\r\n                isten.getUpdatables().get(i).getItems().get(packet.getItemIndex()).setCapacity(packet.getCapacity());\r\n                isten.getUpdatables().get(i).getItems().get(packet.getItemIndex()).resizeBar(packet.getCapacity());\r\n            }\r\n        }\r\n        sendDataToAllClients(packet.getData());\r\n    }\r\n\r\n    private void handlePlayerPosForDoorOpen(Packet25PlayerForDoorOpen packet) {\r\n        mapHandler.CheckIfPlayerOpenedDoor(packet);\r\n    }\r\n\r\n    private void handleItemDropped(Packet13ItemDropped packet) {\r\n        //events.add(packet.getData());\r\n        sendDataToAllClients(packet.getData());\r\n    }\r\n\r\n    private void handleItemPickedUp(Packet12ItemPickedUp packet) {\r\n        //events.add(packet.getData());\r\n        sendDataToAllClients(packet.getData());\r\n    }\r\n\r\n    private void handleChestOpened(Packet11ChestOpened packet) {\r\n        //events.add(packet.getData());\r\n        sendDataToAllClients(packet.getData());\r\n    }\r\n\r\n    //handle Animation Packet\r\n    private void handleAnimation(Packet03Animation packet) {\r\n        packet.writeData(this);\r\n    }\r\n\r\n    //handle Login Packet\r\n    private void handleLogin(Packet00Login packet, InetAddress address, int port) {\r\n        PlayerMP player = null;\r\n        player = new PlayerMP(isten, packet.getUsername(), address, port);\r\n        player.setSkinID(packet.getSkinID());\r\n        this.addConnection(player, packet);\r\n\r\n        //Handle creation of villains - when player joins, the server generated villains are generated on client as well\r\n        handlePlayerJoinedData(player);\r\n    }\r\n\r\n    private void handlePlayerJoinedData(PlayerMP player) {\r\n        playerStatusHandler.addClient(player);\r\n        mapHandler.sendDataToClient(player);\r\n        villainHandler.sendDataToClient(player);\r\n        chestGenerationHandler.sendDataToClient(player);\r\n        for (byte[] data : events) sendDataToAllClients(data);\r\n    }\r\n\r\n    //handle Move Packet\r\n    private void handleMove(Packet02Move packet) {\r\n        packet.writeData(this);\r\n    }\r\n\r\n    public void addConnection(PlayerMP player, Packet00Login packet) {\r\n        boolean alreadyConnected = false;\r\n        for (PlayerMP p : this.connectedPlayers) {\r\n            if(player.getUsername().equalsIgnoreCase(p.getUsername())) {\r\n                if(p.ipAddress == null) {\r\n                    p.ipAddress = player.ipAddress;\r\n                }\r\n                if(p.port == -1) {\r\n                    p.port = player.port;\r\n                }\r\n                alreadyConnected = true;\r\n            }\r\n            else {\r\n                //New player's position is (0,0) -> later: spawnPoints\r\n                //Send data to the already connected players, that the new player exists\r\n                packet = new Packet00Login(player.getUsername(), 0, 0, player.getSkinID());\r\n                sendData(packet.getData(), p.ipAddress, p.port);\r\n\r\n                //Send position as well, so that the players spawn at their current position\r\n                //Send data to the new player, that the already connected player exists\r\n                int index = isten.getPlayerMPIndex(p.getUsername());\r\n                Vec2 pos = ((PlayerMP)isten.getUpdatable(index)).getPlayerCollider().getPosition();\r\n                packet = new Packet00Login(p.getUsername(), pos.x, pos.y, p.getSkinID());\r\n                sendData(packet.getData(), player.ipAddress, player.port);\r\n\r\n            }\r\n        }\r\n        if(!alreadyConnected) {\r\n            //If the player has not been connected before, then add it to connectedPlayers\r\n            this.connectedPlayers.add(player);\r\n        }\r\n    }\r\n\r\n    //Send data to one client\r\n    public void sendData(byte[] data, InetAddress ipAddress, int port) {\r\n        DatagramPacket packet = new DatagramPacket(data, data.length, ipAddress, port);\r\n        try {\r\n            socket.send(packet);\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    //Send data to all clients\r\n    public void sendDataToAllClients(byte[] data) {\r\n        for(int i = 0; i < connectedPlayers.size(); i++) {\r\n            PlayerMP p = connectedPlayers.get(i);\r\n            sendData(data, p.ipAddress, p.port);\r\n        }\r\n    }\r\n\r\n    public boolean isInitialized() {\r\n        return isInitialized;\r\n    }\r\n\r\n    public SharedObject getInitializationLock() {\r\n        return InitializationLock;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/networking/GameServer.java b/src/main/java/org/networking/GameServer.java
--- a/src/main/java/org/networking/GameServer.java	(revision 7213115c5a796d99cc79b2535ef10bb5a1556e4b)
+++ b/src/main/java/org/networking/GameServer.java	(date 1715423447651)
@@ -207,7 +207,7 @@
     }
 
     private void handleChestOpened(Packet11ChestOpened packet) {
-        //events.add(packet.getData());
+        events.add(packet.getData());
         sendDataToAllClients(packet.getData());
     }
 
